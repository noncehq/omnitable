import*as e from"await-to-js";import*as a from"deepmerge-ts";import*as r from"lodash-es";let t=(0,a.deepmergeCustom)({mergeArrays:(e,a)=>(0,r.uniq)(a.defaultMergeFunctions.mergeArrays(e))}),s=a=>({async query(r){let{config:s,sort_params:i,time_dimensions:o=[],filter_relation:m,filter_params:n,page:l,pagesize:d}=r,u=s.cube_options||{},f=[],p=[],b=[];o.forEach(e=>{let a=s.fields.table?.[e.dimension]||s.fields.common?.[e.dimension];b.push({dimension:a.bind,granularity:e.granularity,dateRange:e.date_range})}),s.table.columns.forEach(e=>{let a=s.fields.table?.[e.name]||s.fields.common?.[e.name];!a.bind.startsWith("_")&&(e.measure?f.push(a.bind):b.find(e=>e.dimension===a.bind)||p.push(a.bind))});let g=i.map(e=>[e.field,e.order],[]),c=[{[m]:n.map(e=>{let a={};return a.member=e.field,a.operator=e.expression,a.values=Array.isArray(e.value)?e.value:[e.value],a})}],[y,h]=await (0,e.default)(a.load(t({measures:f,dimensions:p,order:g,timeDimensions:b,filters:c,offset:(l-1)*d,limit:d,total:!0},u)));return y?{error:y,message:y?.message}:{data:{items:h.rawData(),total:h.totalRows()}}}});export{s as default};